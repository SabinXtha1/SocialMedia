generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
  model User{
    id String @id @default(cuid())
    email String @unique
    username String @unique
    clerkId String @unique
    name String?
    bio String?
    image String?
    location String?
    website String?
    createdAt DateTime  @default(now())
    updatedAt DateTime @updatedAt
//relations
    posts Post[]
    comments Comment[]
    likes Like[]

    followers Follows[]  @relation("following")
    followings Follows[]  @relation("follower")

    notifications Notification[]  @relation("userNotification")
    notificationCreated Notification[] @relation("notificationCreator")

  }

  model Post{
    id String @id @default(cuid())
    authorId String
    content String?
    image String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //relation
    author User @relation(fields: [authorId],references: [id],onDelete: Cascade) //delete all post if author delete his account

    comments Comment[]
    likes Like[]
    notifications Notification[]

  }

  model Comment{
    id String @id @default(cuid())
    content String
    authorId String
    postId String
    createdAt DateTime @default(now())
    //relation
     author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
     post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
     notifications Notification[]

     @@index([authorId,postId])

  }
  model Like{
    id String @id @default(cuid())
    postId String
    userId String
    createdAT DateTime @default(now())
    
    user User @relation(fields: [userId],references: [id],onDelete: Cascade)
    post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

    @@index([userId,postId])//composite index for faster queires
    @@unique([userId,postId])//this prevents same user liking post twice

  }
  model Follows{
    followerId String
    followingId String
    createdAT DateTime @default(now())

    follower User @relation("follower",fields: [followerId],references: [id],onDelete: Cascade)
    following User @relation("following",fields: [followingId],references: [id],onDelete:Cascade)

    @@index([followerId,followingId])
    @@id([followerId,followingId])
  }
  model Notification{
    id String @id @default(cuid())
    userId String
    creatorId String
    type NotificationType
    read Boolean @default(false)
    postId String?
    commentId String?
    createdAt DateTime @default(now())



     user User @relation("userNotification",fields: [userId],references: [id],onDelete: Cascade)
     creator User @relation("notificationCreator",fields: [creatorId],references: [id],onDelete: Cascade)
     post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)
     comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)

     @@index([userId,createdAt])


  }

  enum NotificationType{
    LIKE
    COMMENT
    FOLLOW
  }